==============================
Lexical
==============================

whitespace-token:
Unicode-class-Zs | '\u0009' | '\u000B' | '\u000C'
;
new-line-token:
'\u000D' | '\u000A' | '\u0085' | '\u2028' | '\u2029'
;

single-line-comment-token:
'//' (!new-line)*
;
multi-line-comment-token:
'/*' (!'*/')* '*/'
; 
name-token:
normal-name-token | verbatim-name-token
;
verbatim-name-token:
'@' normal-name-token
;
normal-name-token:
name-start-char name-part-char*
;
name-start-char:
letter-char | '_'
;
name-part-char:
letter-char | decimal-digit-char | connecting-char | combining-char | formatting-char
;
letter-char:
A Unicode character of classes Lu, Ll, Lt, Lm, Lo, or Nl
;
decimal-digit-char:
A Unicode character of the class Nd
;
connecting-char:
A Unicode character of the class Pc
;
combining-char:
A Unicode character of classes Mn or Mc
;
formatting-char:
A Unicode character of the class Cf
;
string-value-token:
normal-string-value-token | verbatim-string-value-token
;
normal-string-value-token:
'"'  '"'
;
verbatim-string-value-token:
'@"' '"'
;
integer-value-token:

;
decimal-value-token:

;
real-value-token:

;

==============================
==============================


parsing-unit:
element
;
element:
qualifiable-name uri-aliasing-list? ('=' element-value)?
;
qualifiable-name:
(name ':')? name
;
uri-aliasing-list:
'<' uri-aliasing* '>'
;
uri-aliasing:
name '=' string-value
;
element-value:
complex-value | simple-value
;
complex-value:
type-indicator? (attributes children? | children | ';')
;
type-indicator:
'(' qualifiable-name ')'
;
attributes:
'[' attribute* ']'
;
attribute:
name ('=' attribute-value)?
;
attribute-value:
simple-value
;
children:
simple-child | complex-children
;
simple-child:
'$' simple-value
;
complex-children:
'{' element* '}'
;

simple-value:
type-indicator? (atom-value | list-value)
;
atom-value:
string-value | boolean-value | integer-value | decimal-value | real-value
;
list-value:
'#[' simple-value* ']'
;
boolean-value:
'true' | 'false'
;

