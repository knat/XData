

compilation-unit:
uri-aliasing* namespace*
;

uri-aliasing:
'alias' uri-value 'as' uri-alias ';'
;
uri-value:
string-value
;
uri-alias:
name
;
uri:
uri-value | uri-alias
;

namespace:
'namespace' uri '{' namespace-import* namespace-member* '}'
;
namespace-import:
'import' uri ('as' namespace-alias)? //';'
;
namespace-alias:
name
;
namespace-member:
type | global-element 
;

qualifiable-name:
(namespace-alias ':')? name
;

type:
'type' name type-annotations? type-body
;
type-annotations:
'<' abstract-or-sealed? '>'
;
type-body:
type-list | type-directness | type-extension | type-restriction
;
type-list:
list-item-type simple-type-restrictions?
;
list-item-type:
'lists' qualifiable-name
;

type-directness:
attributes-children | ';'
;
type-extension:
'extends' qualifiable-name attributes-children?
;
type-restriction:
'restricts' qualifiable-name (attributes-children | value-facets)?
;

attributes-children:
attributes children? | children
;
children:
complex-children | simple-child
;
simple-child:
'$' qualifiable-name
;
value-facets:
'${' (lengths | ?? | list-item-type)* '}'
;

attributes:
'[' attribute* ']'
;
attribute:
name attribute-annotations? 'as' qualifiable-name
;
attribute-annotations:
'<' (optional-or-delete | nullable)* '>'
;


global-element:
'element' name global-element-annotations? 'as' qualifiable-name
;
global-element-annotations:
'<' (nullable | abstract-or-sealed | substitute)* '>'
;
complex-children:
'{' member-child* '}'
;
member-child:
local-element | global-element-ref | sequence-children | choice-children
;
local-element:
name local-element-annotations? 'as' qualifiable-name
;
local-element-annotations:
'<' (nullable | member-name | occurrence)* '>'
;
global-element-ref:
'&' qualifiable-name member-child-annotations?
;
member-child-annotations:
'<' (member-name | occurrence)* '>'
;

sequence-children:
'{' member-child* '}' member-child-annotations?
;
choice-children:
'?{' member-child* '}' member-child-annotations?
;



abstract-or-sealed:
'abstract' | 'sealed'
;
optional-or-delete:
'?' | 'x'
;
nullable:
'nullable'
;
substitute:
'substitutes' qualifiable-name
;
member-name:
'membername' name
;
occurrence:
'?' | '*' | '+' | integer-value '..' integer-value?
;