

compilation-unit:
uri-aliasing* namespace*
;

uri-aliasing:
'alias' uri-value 'as' uri-alias ';'
;
uri-value:
string-value
;
uri-alias:
name
;
uri:
uri-value | uri-alias
;

namespace:
'namespace' uri '{' namespace-import* namespace-member* '}'
;
namespace-import:
'import' uri ('as' namespace-alias)? //';'
;
namespace-alias:
name
;
namespace-member:
type | global-attribute | global-element 
;

qualifiable-name:
(namespace-alias ':')? name
;

type:
'type' name type-annotations? type-body
;
type-annotations:
'<' ('abstract' | 'sealed')? '>'
;

type-body:
type-list | type-directness | type-extension | type-restriction
;
type-list:
'lists qualifiable-name
;
type-directness:
attributes structural-children? | structural-children | ';'
;
type-extension:
'extends' qualifiable-name attributes? root-structural-children?
;
type-restriction:
'restricts' qualifiable-name attributes? (root-structural-children | simple-value-restrictions)?
;

simple-value-restrictions:
'${' '}'
;



attributes:
'[' (local-attribute | global-attribute-ref)* ']'
;

global-attribute:
'attribute' name global-attribute-annotations? 'as' qualifiable-name
;
global-attribute-annotations:
'<' 'nullable'? '>'
;

local-attribute:
name local-attribute-annotations? 'as' qualifiable-name
;
local-attribute-annotations:
'<' (optional | member-name | qualified)* '>'
;
global-attribute-ref:
'&' qualifiable-name attribute-ref-annotations?
;
attribute-ref-annotations:
'<' (optional | member-name)* '>'
;
qualified:
'qualified'
;
optional:
'?'
;
member-name:
'membername' ':' name
;

global-element:
'element' name global-element-annotations? 'as' qualifiable-name
;
global-element-annotations:
'<' ('nullable' | 'abstract' | 'sealed' | substitution)* '>'
;
substitution:
'substitutes' qualifiable-name
;

root-structural-children:
'{' '}'
;

occurrence:
'?' | '*' | '+' | integer-value '..' integer-value?
;